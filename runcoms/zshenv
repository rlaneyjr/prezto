#
# Defines environment variables.
#
# Authors:
#   Ricky Laney <rlaneyjr@gmail.com>
#

# Ensure that a non-login, non-interactive shell has a defined environment.
if [[ ( "$SHLVL" -eq 1 && ! -o LOGIN ) && -s "${ZDOTDIR:-$HOME}/.zprofile" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprofile"
fi

############################################################
# Donâ€™t clear the screen after quitting a manual page.
export MANPAGER='less -X';
export MANPATH="$MANPATH:/usr/local/man"

############################################################
# Ensure user-installed binaries are loaded last
#export PATH="/usr/local/bin:/usr/local/sbin:$PATH"
# Ensure my custom stuff is loaded
# Add `~/bin` and `~/lib` to the `$PATH`
#export PATH="$HOME/bin:$HOME/lib:$PATH";
export PATH="$HOME/bin:$HOME/lib:$HOME/scripts:$PATH"

############################################################
# Cheats customizations
CHEATERS="$HOME/cheaters/cheaters"
export CHEAT_EDITOR="vim"
export DEFAULT_CHEAT_DIR="$HOME/.cheat/cheat/cheatsheets"
#export CHEATPATH="$CHEATERS/CheatenLife:$CHEATERS/CloudLife:$CHEATERS/FlyinLife
#                 :$CHEATERS/MayccollLife:$CHEATERS/PacketLife:$CHEATERS/PerlLife
#                 :$CHEATERS/PythonLife:$CHEATERS/VMwareLife"
export CHEATCOLORS=true
# Specifying a Syntax Highlighter
# You may manually specify which syntax highlighter to use for each cheatsheet by wrapping the sheet's contents in a Github-Flavored Markdown code-fence.
# Example:
#
# ```sql
# -- to select a user by ID
# SELECT *
# FROM Users
# WHERE id = 100
# ```
# If no syntax highlighter is specified, the bash highlighter will be used by default.

############################################################
# Ansible Environment
#export ANSIBLE_CONFIG=$HOME/Projects/ansible.cfg
#export ANSIBLE_LIBRARY=$HOME/Projects/ansible-cisco-snmp/library

############################################################
# Ensure python from brew and local user is loaded
#export PATH="/usr/local/bin/python:/usr/local/bin/python3:/Users/rlaney/Library/Python/2.7/bin:$PATH"

#This formula installs a python2 executable to /usr/local/bin.
#If you wish to have this formula's python executable in your PATH then add
#the following to ~/.zshrc:
#export PATH="/usr/local/opt/python/libexec/bin:$PATH"

#Pip and setuptools have been installed. To update them
#  pip2 install --upgrade pip setuptools

#You can install Python packages with
#  pip2 install <package>

#They will install into the site-package directory
#  /usr/local/lib/python2.7/site-packages

#See: https://docs.brew.sh/Homebrew-and-Python.html

############################################################
#To use anaconda, you may need to add the /usr/local/anaconda3/bin directory
#to your PATH environment variable, eg (for bash shell):

export PATH="/usr/local/anaconda3/bin:$PATH"

#Cask anaconda installs files under /usr/local. The presence of such
#files can cause warnings when running "brew doctor", which is considered
#to be a bug in Homebrew-Cask.

############################################################
#Pip, setuptools, and wheel have been installed. To update them
#  pip3 install --upgrade pip setuptools wheel

#You can install Python packages with
#  pip3 install <package>

#They will install into the site-package directory
#  /usr/local/lib/python3.6/site-packages

#See: https://docs.brew.sh/Homebrew-and-Python.html

############################################################
# Make pip available ONLY in a virtualenv. Protects global packages.
#export PIP_REQUIRE_VIRTUALENV=true

# Which autoenv do you want to use?
#source $HOME/.zsh/zsh-autoenv/autoenv.zsh
#source $HOME/.zsh/autoenv/activate.sh
#source /usr/local/opt/autoenv/activate.sh
#source $HOME/.zplug/repos/Tarrasch/zsh-autoenv/autoenv.zsh

############################################################
# JAVA manager using jenv
export PATH="$HOME/.jenv/bin:$PATH"
#eval "$(jenv init -)"

# Java
#export JAVA_HOME="`/usr/libexec/java_home -v 1.8`"
#export JAVA_HOME="/usr/libexec/java_home -v 1.8"
#export JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_102.jdk/Contents/Home -v 1.8"
#export JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk-10.jdk/Contents/Home -v 10"

############################################################
#If you need to have this software first in your PATH run:
export PATH="/usr/local/opt/icu4c/bin:$PATH"
export PATH="/usr/local/opt/icu4c/sbin:$PATH"

#For compilers to find this software you may need to set:
#    LDFLAGS:  -L/usr/local/opt/icu4c/lib
#    CPPFLAGS: -I/usr/local/opt/icu4c/include
#For pkg-config to find this software you may need to set:
#    PKG_CONFIG_PATH: /usr/local/opt/icu4c/lib/pkgconfig

############################################################
#If you need to have this software first in your PATH run:
export PATH="/usr/local/opt/tcl-tk/bin:$PATH"

#For compilers to find this software you may need to set:
#    LDFLAGS:  -L/usr/local/opt/tcl-tk/lib
#    CPPFLAGS: -I/usr/local/opt/tcl-tk/include
#For pkg-config to find this software you may need to set:
#    PKG_CONFIG_PATH: /usr/local/opt/tcl-tk/lib/pkgconfig

############################################################
#If you need to have this software first in your PATH run:
export PATH="/usr/local/opt/sqlite/bin:$PATH"

#For compilers to find this software you may need to set:
#    LDFLAGS:  -L/usr/local/opt/sqlite/lib
#    CPPFLAGS: -I/usr/local/opt/sqlite/include
#For pkg-config to find this software you may need to set:
#    PKG_CONFIG_PATH: /usr/local/opt/sqlite/lib/pkgconfig

############################################################
#If you need to have this software first in your PATH run:
export PATH="/usr/local/opt/libxml2/bin:$PATH"

#For compilers to find this software you may need to set:
#    LDFLAGS:  -L/usr/local/opt/libxml2/lib
#    CPPFLAGS: -I/usr/local/opt/libxml2/include
#For pkg-config to find this software you may need to set:
#    PKG_CONFIG_PATH: /usr/local/opt/libxml2/lib/pkgconfig

#If you need Python to find bindings for this keg-only formula, run:
#echo /usr/local/opt/libxml2/lib/python2.7/site-packages >> /usr/local/lib/python2.7/site-packages/libxml2.pth

############################################################
#All commands have been installed with the prefix 'g'.

#If you really need to use these commands with their normal names, you
#can add a "gnubin" directory to your PATH from your bashrc like:
#export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"

#Additionally, you can access their man pages with normal names if you add
#the "gnuman" directory to your MANPATH from your bashrc as well:
#export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"

############################################################
#All commands have been installed with the prefix 'g'.
#If you do not want the prefix, install using the "with-default-names" option.

#If you need to use these commands with their normal names, you
#can add a "gnubin" directory to your PATH from your bashrc like:
#export PATH="/usr/local/opt/findutils/libexec/gnubin:$PATH"

#Additionally, you can access their man pages with normal names if you add
#the "gnuman" directory to your MANPATH from your bashrc as well:
#export MANPATH="/usr/local/opt/findutils/libexec/gnuman:$MANPATH"

############################################################
# Ensure go has it's GOROOT loaded
typeset -Ug GOPATH
export GOPATH="$HOME/.go"
export PATH="/usr/local/opt/go/libexec/bin:$PATH"
# Go Code bin commands
export PATH="$HOME/.go/bin:$PATH"

############################################################
#To have launchd start mongodb now and restart at login:
#  brew services start mongodb
#Or, if you don't want/need a background service you can just run:
#  mongod --config /usr/local/etc/mongod.conf

############################################################
#To migrate existing data from a previous major version of PostgreSQL run:
#  brew postgresql-upgrade-database
#
#To have launchd start postgresql now and restart at login:
#  brew services start postgresql
#Or, if you don't want/need a background service you can just run:
#  pg_ctl -D /usr/local/var/postgres start

############################################################
#We've installed your MySQL database without a root password. To secure it run:
#    mysql_secure_installation
#
#MySQL is configured to only allow connections from localhost by default
#
#To connect run:
#    mysql -uroot
#
#To have launchd start mysql now and restart at login:
#  brew services start mysql
#Or, if you don't want/need a background service you can just run:
#  mysql.server start

############################################################
#If you need to have this software first in your PATH run:
#  echo 'export PATH="/usr/local/opt/mysql-client/bin:$PATH"' >> ~/.zshrc
#
#For compilers to find this software you may need to set:
#    LDFLAGS:  -L/usr/local/opt/mysql-client/lib
#    CPPFLAGS: -I/usr/local/opt/mysql-client/include
#For pkg-config to find this software you may need to set:
#    PKG_CONFIG_PATH: /usr/local/opt/mysql-client/lib/pkgconfig

############################################################
#Docroot is: /usr/local/var/www

#The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so that
#nginx can run without sudo.

#nginx will load all files in /usr/local/etc/nginx/servers/.

#To have launchd start nginx now and restart at login:
#  brew services start nginx
#Or, if you don't want/need a background service you can just run:
#  nginx

############################################################
#This formula is keg-only, which means it was not symlinked into /usr/local,
#because some formulae require a newer version of bison.

#If you need to have this software first in your PATH run:
export PATH="/usr/local/opt/bison/bin:$PATH"

#For compilers to find this software you may need to set:
#    LDFLAGS:  -L/usr/local/opt/bison/lib

############################################################
#This formula is keg-only, which means it was not symlinked into /usr/local,
#because Qt 5 has CMake issues when linked.

#If you need to have this software first in your PATH run:
export PATH="/usr/local/opt/qt/bin:$PATH"

#For compilers to find this software you may need to set:
#    LDFLAGS:  -L/usr/local/opt/qt/lib
#    CPPFLAGS: -I/usr/local/opt/qt/include
#For pkg-config to find this software you may need to set:
#    PKG_CONFIG_PATH: /usr/local/opt/qt/lib/pkgconfig

############################################################
# Node Version Manager
#Please note that upstream has asked us to make explicit managing
#nvm via Homebrew is unsupported by them and you should check any
#problems against the standard nvm install method prior to reporting.

#You should create NVM's working directory if it doesn't exist:
#  mkdir ~/.nvm

#Add the following to ~/.zshrc or your desired shell
#configuration file:
export NVM_DIR="$HOME/.nvm"
. "/usr/local/opt/nvm/nvm.sh"

#You can set $NVM_DIR to any location, but leaving it unchanged from
#/usr/local/opt/nvm will destroy any nvm-installed Node installations
#upon upgrade/reinstall.

#export NVM_DIR="$HOME/.nvm"
#[ -s "$(brew --prefix nvm)/nvm.sh" ] && . $(brew --prefix nvm)/nvm.sh  # This loads nvm
#export NVM_DIR="~/.nvm"
#[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
# Enable persistent REPL history for `node`.
export NODE_REPL_HISTORY="$HOME/.node_history"
# Allow 32Â³ entries; the default is 1000.
export NODE_REPL_HISTORY_SIZE="32768"
# Use sloppy mode by default, matching web browsers.
export NODE_REPL_MODE="sloppy"

#Type `nvm help` for further information.

############################################################
#OPAM uses ~/.opam by default for its package database, so you need to
#initialize it first by running (as a normal user):
#$  opam init

#Run the following to initialize your environment variables:
#eval `opam config env`

#To export the needed variables every time, add them to your dotfiles.
#  * On Bash, add them to `~/.bash_profile`.
#  * On Zsh, add them to `~/.zprofile` or `~/.zshrc` instead.
#Documentation and tutorials are available at https://opam.ocaml.org, or
#via "man opam" and "opam --help".

############################################################
#To enable auto-activation add to your profile:
#if which pyenv-virtualenv-init > /dev/null; then
#    eval "$(pyenv virtualenv-init -)";
#fi

############################################################
#This formula is keg-only, which means it was not symlinked into /usr/local,
#because macOS already provides this software and installing another version in
#parallel can cause all kinds of trouble.

#If you need to have this software first in your PATH run:
export PATH="/usr/local/opt/ncurses/bin:$PATH"

#For compilers to find this software you may need to set:
#    LDFLAGS:  -L/usr/local/opt/ncurses/lib
#    CPPFLAGS: -I/usr/local/opt/ncurses/include
#For pkg-config to find this software you may need to set:
#    PKG_CONFIG_PATH: /usr/local/opt/ncurses/lib/pkgconfig

############################################################
#To have launchd start redis now and restart at login:
#  brew services start redis
#Or, if you don't want/need a background service you can just run:
#  redis-server /usr/local/etc/redis.conf

############################################################
#You can use $SBT_OPTS to pass additional JVM options to SBT:
#   SBT_OPTS="-XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M"

#This formula uses the standard Lightbend sbt launcher script.
#Project specific options should be placed in .sbtopts in the root of your project.
#Global settings should be placed in /usr/local/etc/sbtopts

############################################################
#To use with IntelliJ, set the Scala home to:
#  /usr/local/opt/scala/idea

#Bash completion has been installed to:
#  /usr/local/etc/bash_completion.d

############################################################
#The sip-dir for Python is /usr/local/share/sip.

#Python modules have been installed and Homebrew's site-packages is not
#in your Python sys.path, so you will not be able to import the modules
#this formula installed. If you plan to develop with these modules,
#please run:
#  mkdir -p /Users/rlaney/Library/Python/2.7/lib/python/site-packages
#  echo 'import site; site.addsitedir("/usr/local/lib/python2.7/site-packages")' >> /Users/rlaney/Library/Python/2.7/lib/python/site-packages/homebrew.pth

############################################################
#To activate these completions, add the following to your .zshrc:
#  fpath=(/usr/local/share/zsh-completions $fpath)

#You may also need to force rebuild `zcompdump`:
#  rm -f ~/.zcompdump; compinit

#Additionally, if you receive "zsh compinit: insecure directories" warnings when attempting
#to load these completions, you may need to run this:
#  chmod go-w '/usr/local/share'

############################################################
# Atom Environment Variables:
# The path from which Atom loads source code in dev mode.
# Defaults to `~/github/atom`.
export ATOM_DEV_RESOURCE_PATH="$HOME/.atom/dev"
# The root path for all configuration files and folders.
# Defaults to `~/.atom`.
export ATOM_HOME="$HOME/.atom"

############################################################
# Ensure X-Quartz is loaded
export PATH="$PATH:/opt/X11/bin"
############################################################
# Use the Postgresql.app command line tools.
#export PATH="$PATH:/Applications/Postgres.app/Contents/Versions/latest/bin"

############################################################
# PHP brew installation
#export PATH="$(brew --prefix homebrew/php/php56)/bin:$PATH"

############################################################
# VMware Fusion - http://jamesreubenknowles.com/vmrun-fusion-2132
export PATH="$PATH:/Applications/VMware Fusion.app/Contents/Library"

############################################################
# Ensure rvm is first
#export PATH="$HOME/.rvm/gems/ruby-2.3.0/bin:$HOME/.rvm/bin:$PATH"

############################################################
# Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries
# If you need to have this software first in your PATH run:
export PATH="/usr/local/opt/openssl/bin:$PATH"
# This is an alternate version of another formula.
# If you need to have this software first in your PATH run:
#export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"

############################################################
# Stuff removed from force load since it is already being loaded by default
# removed = /usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:$HOME/.local/bin:
#export PATH="/usr/local/bin:$HOME/.bin:$HOME/scripts:/usr/local/bin/python:/usr/local/bin/python3:/opt/X11/bin:/usr/local/opt/coreutils/libexec/gnubin:$PATH"

############################################################
# User specified directories.  Can be overriden with local command.
export HOMEBREW_CASK_OPTS="--appdir=/Applications"

############################################################
# Perl Environment Variables
#export PATH="$PATH:/Users/rlaney/perl5/bin"
#export PERL5LIB="/Users/rlaney/perl5/lib/perl5"
#export PERL_LOCAL_LIB_ROOT="/Users/rlaney/perl5"
#export PERL_MB_OPT="--install_base \"/Users/rlaney/perl5\""
#export PERL_MM_OPT="INSTALL_BASE=/Users/rlaney/perl5"
## Perl Environment Variables
#PATH="/Users/rlaney/perl5/bin${PATH:+:${PATH}}"; export PATH;
#PERL5LIB="/Users/rlaney/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
#PERL_LOCAL_LIB_ROOT="/Users/rlaney/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
#PERL_MB_OPT="--install_base \"/Users/rlaney/perl5\""; export PERL_MB_OPT;
#PERL_MM_OPT="INSTALL_BASE=/Users/rlaney/perl5"; export PERL_MM_OPT;

############################################################
# The next line updates PATH for the Google Cloud SDK.
if [ -f '$HOME/Projects/Cloud/Google/google-cloud-sdk/path.zsh.inc' ];
then source '$HOME/Projects/Cloud/Google/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '$HOME/Projects/Cloud/Google/google-cloud-sdk/completion.zsh.inc' ];
then source '$HOME/Projects/Cloud/Google/google-cloud-sdk/completion.zsh.inc'; fi

############################################################
# Add RVM to PATH for scripting
if [[ -f $HOME/.rvmrc ]]; then
    source $HOME/.rvmrc;
fi

# Load RVM into a shell session *as a function*
# RVM home scripts completion
[[ -r $rvm_path/scripts/completion ]] && . $rvm_path/scripts/completion

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
if [[ -d $HOME/.rvm/bin ]]; then
    export PATH="$PATH:$HOME/.rvm/bin"
fi
